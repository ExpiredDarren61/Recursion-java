import java.util.Scanner;


//5 3 . . 7 . . . . 6 . . 1 9 5 . . . . 9 8 . . . . 6 . 8 . . . 6 . . . 3 4 . . 8 . 3 0 0 1 7 . . . 2 . . . 6 . 6 . . . . 2 8 . . . . 4 1 9 . . 5 . . . . 8 . . 7 9
public class Main {

    public static boolean isSafe(char[][] board, int row, int column, int number) {
        for (int i = 0; i < board.length; i++) {
            //row and column
            if (board[i][column] == (char)(number + '0') ) {
                return false;
            }
            if (board[row][i] == (char)(number + '0')) {
                return false;
            }
        }
        //grid
        int startingRow = (row/3)*3;
        int startingColumn = (column/3)*3;
        for (int i = startingRow; i < startingRow+3; i++) {
            for (int j = startingColumn; j < startingColumn + 3; j++) {
                if (board[i][j] == (char)(number + '0')) {
                    return false;
                }
            }
        }
        return true;
    }
    public static boolean helper(char[][] board, int row, int column) {
        if (row == board.length) {
            return true;
        }

        int newRow = 0;
        int newColumn = 0;

        if (column == board.length - 1) {
            newRow = row + 1;
            newColumn = 0;
        }
        else {
            newRow = row;
            newColumn = column + 1;
        }

        if (board[row][column] != '.') {
            if (helper(board, newRow, newColumn)) {
                return true;
            }
        }
        else {
            for (int i = 1; i <= 9; i++) {
                if (isSafe(board, row, column, i)) {
                    board[row][column] = (char) (i + '0');
                    if (helper(board, newRow, newColumn)) {
                        return true;
                    }
                    else {
                        board[row][column] = '.';
                    }
                }
            }
        }
        return false;
    }
    public static void solveSudoku(char[][] board) {
        helper(board, 0, 0);

    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        char[][] board = new char[9][9];
        System.out.print("Enter in your numbers: ");
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                board[i][j] = sc.next().charAt(0);
            }
        }
        solveSudoku(board);

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }

    }
}
