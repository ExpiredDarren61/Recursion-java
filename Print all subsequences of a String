subsequences = 2^n
levels = 2^n < 2^n-1 < 2^n-2 .... 2^n-n(or 1)
geometric progression formula = a(r^n - 1)/r-1 
a = 1
r = 2
n = n + 1 (total number of levels are n + 1)
time complexity = O(2^n)


public class Main {

    public static boolean[] alphabetsFound = new boolean[26];

    public static void subsequences(int index, String str, String newString) {

        if (index == str.length()) {
            System.out.println(newString);
            return;
        }
        char currentCharacter = str.charAt(index);

        // element wants to join new string
        subsequences(index + 1, str, newString + currentCharacter);

        // element doesn't wan to join the new string
        subsequences(index + 1, str, newString + '_');
    }

    public static void main(String[] args) {
        String str = "abc";
        subsequences(0, str, "");
    }
}
